{
  "_args": [
    [
      {
        "raw": "https://github.com/jishi/node-sonos-http-api",
        "scope": null,
        "escapedName": null,
        "name": null,
        "rawSpec": "https://github.com/jishi/node-sonos-http-api",
        "spec": "git+https://github.com/jishi/node-sonos-http-api.git",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:jishi/node-sonos-http-api.git",
          "sshUrl": "git+ssh://git@github.com/jishi/node-sonos-http-api.git",
          "httpsUrl": "git+https://github.com/jishi/node-sonos-http-api.git",
          "gitUrl": "git://github.com/jishi/node-sonos-http-api.git",
          "shortcut": "github:jishi/node-sonos-http-api",
          "directUrl": "https://raw.githubusercontent.com/jishi/node-sonos-http-api/master/package.json"
        }
      },
      "/home/pahul/zone"
    ]
  ],
  "_from": "git+https://github.com/jishi/node-sonos-http-api.git",
  "_id": "sonos-http-api@1.6.0",
  "_inCache": true,
  "_location": "/sonos-http-api",
  "_phantomChildren": {},
  "_requested": {
    "raw": "https://github.com/jishi/node-sonos-http-api",
    "scope": null,
    "escapedName": null,
    "name": null,
    "rawSpec": "https://github.com/jishi/node-sonos-http-api",
    "spec": "git+https://github.com/jishi/node-sonos-http-api.git",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:jishi/node-sonos-http-api.git",
      "sshUrl": "git+ssh://git@github.com/jishi/node-sonos-http-api.git",
      "httpsUrl": "git+https://github.com/jishi/node-sonos-http-api.git",
      "gitUrl": "git://github.com/jishi/node-sonos-http-api.git",
      "shortcut": "github:jishi/node-sonos-http-api",
      "directUrl": "https://raw.githubusercontent.com/jishi/node-sonos-http-api/master/package.json"
    }
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "git+https://github.com/jishi/node-sonos-http-api.git#e73ef7d1a387c2547235cf3b4fe0e7682ac13a67",
  "_shasum": "8adbf853b22a1dff2356db88a2296f1c708d80a6",
  "_shrinkwrap": null,
  "_spec": "https://github.com/jishi/node-sonos-http-api",
  "_where": "/home/pahul/zone",
  "author": {
    "name": "Jimmy Shimizu",
    "email": "jimmy@shimizu.se"
  },
  "bugs": {
    "url": "https://github.com/jishi/node-sonos-http-api/issues"
  },
  "dependencies": {
    "anesidora": "^1.2.0",
    "aws-sdk": "^2.12.0",
    "basic-auth": "~1.1.0",
    "fuse.js": "^2.5.0",
    "html-entities": "^1.2.1",
    "json5": "^0.5.1",
    "mime": "^1.4.0",
    "music-metadata": "^0.8.4",
    "node-static": "^0.7.9",
    "request-promise": "~1.0.2",
    "sonos-discovery": "https://github.com/jishi/node-sonos-discovery/archive/v1.6.0.tar.gz",
    "wav-file-info": "0.0.8"
  },
  "description": "A simple node app for controlling a Sonos system with basic HTTP requests",
  "devDependencies": {
    "eslint": "^4.8.0",
    "eslint-config-airbnb-base": "^12.0.1",
    "eslint-plugin-import": "^2.7.0"
  },
  "engines": {
    "node": ">=4.0.0",
    "npm": "^2.0.0"
  },
  "gitHead": "e73ef7d1a387c2547235cf3b4fe0e7682ac13a67",
  "homepage": "https://github.com/jishi/node-sonos-http-api#readme",
  "license": "MIT",
  "main": "lib/sonos-http-api.js",
  "name": "sonos-http-api",
  "optionalDependencies": {},
  "readme": "[![PayPal donate button](https://img.shields.io/badge/paypal-donate-yellow.svg)](https://www.paypal.me/jishi \"Donate once-off to this project using Paypal\") [![Join the chat at gitter](https://img.shields.io/gitter/room/badges/shields.svg)](https://gitter.im/node-sonos-http-api/Lobby \"Need assistance? Join the chat at Gitter.im\") \n\nFeel free to use it as you please. Consider donating if you want to support further development. Reach out on the gitter chat if you have issues getting it to run, instead of creating new issues, thank you!\n\nIf you are also looking for cloud control (ifttt, public webhooks etc), see the [bronos-client](http://www.bronos.net) project! That pi image also contains an installation of this http-api.  \n\nSONOS HTTP API\n==============\n\n** Beta is no more, master is up to date with the beta now! **\n\n**This application requires node 4.0.0 or higher!**\n\n**This should now work on Node 6+, please let me know if you have issues**\n\nA simple http based API for controlling your Sonos system.\n\nThere is a simple sandbox at /docs (incomplete atm)\n\nUSAGE\n-----\n\nStart by fixing your dependencies. Invoke the following command:\n\n`npm install --production`\n\nThis will download the necessary dependencies if possible.\n\nstart the server by running\n\n`npm start`\n\nNow you can control your system by invoking the following commands:\n\n\thttp://localhost:5005/zones\n\thttp://localhost:5005/lockvolumes\n\thttp://localhost:5005/unlockvolumes\n\thttp://localhost:5005/pauseall[/{timeout in minutes}]\n\thttp://localhost:5005/resumeall[/{timeout in minutes}]\n\thttp://localhost:5005/preset/{JSON preset}\n\thttp://localhost:5005/preset/{predefined preset name}\n\thttp://localhost:5005/reindex\n\thttp://localhost:5005/{room name}/sleep/{timeout in seconds or \"off\"}\n\thttp://localhost:5005/{room name}/sleep/{timeout in seconds or \"off\"}\n\thttp://localhost:5005/{room name}/{action}[/{parameter}]\n\nExample:\n\n`http://localhost:5005/living room/volume/15`\n(will set volume for room Living Room to 15%)\n\n`http://localhost:5005/living room/volume/+1`\n(will increase volume by 1%)\n\n`http://localhost:5005/living room/next`\n(will skip to the next track on living room, unless it's not a coordinator)\n\n`http://localhost:5005/living room/pause`\n(will pause the living room)\n\n`http://localhost:5005/living room/favorite/mysuperplaylist`\n(will replace queue with the favorite called \"mysuperplaylist\")\n\n`http://localhost:5005/living room/repeat/on`\n(will turn on repeat mode for group)\n\n\nThe actions supported as of today:\n\n* play\n* pause\n* playpause (toggles playing state)\n* volume (parameter is absolute or relative volume. Prefix +/- indicates relative volume)\n* groupVolume (parameter is absolute or relative volume. Prefix +/- indicates relative volume)\n* mute / unmute\n* groupMute / groupUnmute\n* togglemute (toggles mute state)\n* trackseek (parameter is queue index)\n* timeseek (parameter is in seconds, 60 for 1:00, 120 for 2:00 etc)\n* next\n* previous\n* state (will return a json-representation of the current state of player)\n* favorite\n* favorites (with optional \"detailed\" parameter)\n* playlist\n* lockvolumes / unlockvolumes (experimental, will enforce the volume that was selected when locking!)\n* repeat (on/off)\n* shuffle (on/off)\n* crossfade (on/off)\n* pauseall (with optional timeout in minutes)\n* resumeall (will resume the ones that was pause on the pauseall call. Useful for doorbell, phone calls, etc. Optional timeout)\n* say\n* sayall\n* saypreset\n* queue\n* clearqueue\n* sleep (values in seconds)\n* linein (only analog linein, not PLAYBAR yet)\n* clip (announce custom mp3 clip)\n* clipall\n* clippreset\n* join / leave  (Grouping actions)\n* sub (on/off/gain/crossover/polarity) See SUB section for more info\n* nightmode (on/off, PLAYBAR only)\n* speechenhancement (on/off, PLAYBAR only)\n* bass/treble (use -10 thru 10 as value. 0 is neutral)\n\n\nState\n-----\n\nExample of a state json:\n\n\t{\n\t  \"currentTrack\":{\n\t    \"artist\":\"College\",\n\t    \"title\":\"Teenage Color - Anoraak Remix\",\n\t    \"album\":\"Nightdrive With You\",\n\t    \"albumArtURI\":\"/getaa?s=1&u=x-sonos-spotify%3aspotify%253atrack%253a3DjBDQs8ebkxMBo2V8V3SH%3fsid%3d9%26flags%3d32\",\n\t    \"duration\":347,\n\t    \"uri\":\"x-sonos-spotify:spotify%3atrack%3a3DjBDQs8ebkxMBo2V8V3SH?sid=9&flags=32\"\n\t  },\n\t  \"nextTrack\":{\n\t    \"artist\":\"Blacknuss\",\n\t    \"title\":\"Thinking of You\",\n\t    \"album\":\"3\",\n\t    \"albumArtURI\":\"/getaa?s=1&u=x-sonos-spotify%3aspotify%253atrack%253a4U93TIa0X6jGQrTBGTkChH%3fsid%3d9%26flags%3d32\",\n\t    \"duration\":235,\n\t    \"uri\":\"x-sonos-spotify:spotify%3atrack%3a4U93TIa0X6jGQrTBGTkChH?sid=9&flags=32\"\n\t  },\n\t  \"volume\":18,\n\t  \"mute\":false,\n\t  \"trackNo\":161,\n\t  \"elapsedTime\":200,\n\t  \"elapsedTimeFormatted\":\"03:20\",\n\t  \"zoneState\":\"PAUSED_PLAYBACK\",\n\t  \"playerState\":\"PLAYING\",\n\t  \"zonePlayMode\":{\n\t    \"shuffle\":true,\n\t    \"repeat\":false,\n\t    \"crossfade\":false\n\t  },\n\t  \"equalizer\": {\n        \"bass\": 0,\n        \"treble\": 0,\n        \"loudness\": true\n      }\n\t}\n\nQueue\n-----\nObtain the current queue list from a specified player. The request will accept:\n - limit (optional)\n - offset (optional, requires limit)\n - detailed flag (optional, include uri in response)\n\n\t    http://localhost:5005/living room/queue\n\t    http://localhost:5005/living room/queue/10 (only return top 10)\n\t    http://localhost:5005/living room/queue/10/10 (return result 11-20)\n\t    http://localhost:5005/living room/queue/detailed\n\t    http://localhost:5005/living room/queue/10/detailed\n\nExample queue response:\n```\n[\n    {\n      \"albumArtURI\": \"/getaa?s=1&u=x-sonos-spotify%3aspotify%253atrack%253a0AvV49z4EPz5ocYN7eKGAK%3fsid%3d9%26flags%3d8224%26sn%3d3\",\n      \"title\": \"No Diggity\",\n      \"artist\": \"Blackstreet\",\n      \"album\": \"Another Level\"\n    },\n    {\n      \"albumArtURI\": \"/getaa?s=1&u=x-sonos-spotify%3aspotify%253atrack%253a5OQGeJ1ceykovrykZsGhqL%3fsid%3d9%26flags%3d8224%26sn%3d3\",\n      \"title\": \"Breathless\",\n      \"artist\": \"The Corrs\",\n      \"album\": \"In Blue\"\n    }\n]\n\n```\n\n\nPreset\n------\n\nA preset is a predefined grouping of players with predefined volumes, that will start playing whatever is in the coordinators queue.\n\nExample preset (state and uri are optional):\n\n\t{\n\t  \"players\": [\n\t    { \"roomName\": \"room1\", \"volume\": 15},\n\t    {\"roomName\": \"room2\", \"volume\": 25}\n\t  ],\n\t  \"state\": \"stopped\",\n\t  \"favorite\": \"my favorite name\",\n\t  \"uri\": \"x-rincon-stream:RINCON_0000000000001400\",\n\t  \"playMode\": {\n\t    \"shuffle\": true\n\t  },\n\t  \"pauseOthers\": true\n\t  \"sleep\": 600\n\t}\n\nThe first player listed in the example, \"room1\", will become the coordinator. It will loose it's queue when ungrouped but eventually that will be fixed in the future. Playmode defines the three options \"shuffle\", \"repeat\", \"crossfade\" similar to the state\nFavorite will have precedence over a uri.\npauseOthers will pause all zones before applying the preset, effectively muting your system.  sleep is an optional value that enables the sleep timer and is defined in total seconds (600 = 10 minutes).\n\npresets.json (deprecated, use preset files instead)\n-----------\n\nYou can create a file with pre made presets, called presets.json. It will be loaded upon start, any changes requires a restart of the server.\n\nExample content:\n\n```json\n{\n  \"all\": {\n    \"playMode\": {\n      \"shuffle\": true\n    },\n    \"players\": [\n      {\n        \"roomName\": \"Bathroom\",\n        \"volume\": 10\n      },\n      {\n        \"roomName\": \"Kitchen\",\n        \"volume\": 10\n      },\n      {\n        \"roomName\": \"Office\",\n        \"volume\": 10\n      },\n      {\n        \"roomName\": \"Bedroom\",\n        \"volume\": 10\n      },\n      {\n        \"roomName\": \"TV Room\",\n        \"volume\": 15\n      }\n    ],\n    \"pauseOthers\": true\n  },\n  \"tv\": {\n    \"players\": [\n      {\n        \"roomName\": \"TV Room\",\n        \"volume\": 20\n      }\n    ],\n    \"pauseOthers\": true,\n    \"uri\": \"x-rincon-stream:RINCON_000XXXXXXXXXX01400\"\n  }\n}\n```\n\n\nIn the example, there is one preset called `all`, which you can apply by invoking:\n\n`http://localhost:5005/preset/all`\n\n\npresets folder\n--------------\n\nYou can create a preset files in the presets folder with pre made presets. It will be loaded upon start, any changes made to files in this folder (addition, removal, modification) will trigger a reload of your presets. The name of the file (xxxxxx.json) will become the name of the preset. It will be parsed as JSON5, to be more forgiving of typos. See http://json5.org/ for more info.\n\nExample content:\n\n```json\n{\n  \"players\": [\n    {\n      \"roomName\": \"Bathroom\",\n      \"volume\": 10\n    },\n    {\n      \"roomName\": \"Kitchen\",\n      \"volume\": 10\n    },\n    {\n      \"roomName\": \"Office\",\n      \"volume\": 10\n    },\n    {\n      \"roomName\": \"Bedroom\",\n      \"volume\": 10\n    },\n    {\n      \"roomName\": \"TV Room\",\n      \"volume\": 15\n    }\n  ],\n  \"playMode\": {\n    \"shuffle\": true,\n    \"repeat\": \"all\",\n    \"crossfade\": false\n  },\n  \"pauseOthers\": false,\n  \"favorite\": \"My example favorite\"\n}\n```\n\nThere is an example.json bundled with this repo. The name of the file will become the name of the preset.\n\nsettings.json\n-------------\n\nIf you want to change default settings, you can create a settings.json file and put in the root folder. This will be parsed as JSON5, to be more forgiving. See http://json5.org/ for more info.\n\nAvailable options are:\n\n* port: change the listening port\n* ip: change the listening IP\n* https: use https which requires a key and certificate or pfx file\n* auth: require basic auth credentials which requires a username and password\n* announceVolume: the percentual volume use when invoking say/sayall without any volume parameter\n* presetDir: absolute path to look for presets (folder must exist!)\n\n\nExample:\n```json\n\t{\n\t  \"voicerss\": \"Your api key for TTS with voicerss\",\n\t  \"microsoft\": {\n\t    \"key\": \"Your api for Bing speech API\",\n\t    \"name\": \"ZiraRUS\"\n\t  },\n\t  \"port\": 5005,\n\t  \"ip\": \"0.0.0.0\",\n\t  \"securePort\": 5006,\n\t  \"https\": {\n\t    \"key\": \"/path/to/key.pem\",\n\t    \"cert\" : \"/path/to/cert.pem\"\n\n\t    //... for pfx (alternative configuration)\n\t    \"pfx\": \"/path/to/pfx.pfx\",\n\t    \"passphrase\": \"your-passphrase-if-applicable\"\n\t  },\n\t  \"auth\": {\n\t    \"username\": \"admin\",\n\t    \"password\": \"password\"\n\t  },\n\t  \"announceVolume\": 40,\n\t  \"pandora\": {\n\t    \"username\": \"your-pandora-account-email-address\",\n\t    \"password\": \"your-pandora-password\"\n\t  },\n\t  \"spotify\": {\n\t    \"clientId\": \"your-spotify-application-clientId\",\n\t    \"clientSecret\": \"your-spotify-application-clientSecret\"\n\t  },\n\t  \"library\": {\n\t    \"randomQueueLimit\": 50\n\t  }\n\t}\n```\n\nOverride as it suits you.\n\nNote for Spotify users!\n-----------------------\n\nTo use Spotify, go to https://developer.spotify.com/my-applications/#!/applications/create and create a Spotify application to get your client keys. You can name it Sonos or anything else and you don't have to change any values. Use the Client ID and the Client Secret values in the settings.json file as indicated above.\n\n\nFavorites\n---------\n\nIt now has support for starting favorites. Simply invoke:\n\n`http://localhost:5005/living room/favorite/[favorite name]`\n\nand it will replace the queue with that favorite. Bear in mind that favorites may share name, which might give unpredictable behavior at the moment.\n\nPlaylist\n---------\n\nPlaying a Sonos playlist is now supported. Invoke the following:\n\n`http://localhost:5005/living room/playlist/[playlist name]`\n\nand it will replace the queue with the playlist and starts playing.\n\n\nSay (TTS support)\n-----------------\n\nExperimental support for TTS. Today the following providers are available:\n\n* voicerss\n* Microsoft Cognitive Services (Bing Text to Speech API)\n* AWS Polly\n* Google (default)\n* macOS say command\n\nIt will use the one you configure in settings.json. If you define settings for multiple TTS services, it will not be guaranteed which one it will choose!\n\n#### VoiceRSS\n\nThis REQUIRES a registered API key from voiceRSS! See http://www.voicerss.org/ for info.\n\nYou need to add this to a file called settings.json (create if it doesn't exist), like this:\n\n```\n{\n  \"voicerss\": \"f5e77e1d42063175b9219866129189a3\"\n}\n```\n\nReplace the code above (it is just made up) with the api-key you've got after registering.\n\nAction is:\n\n\t/[Room name]/say/[phrase][/[language_code]][/[announce volume]]\n\t/sayall/[phrase][/[language_code]][/[announce volume]]\n\nExample:\n\n\t/Office/say/Hello, dinner is ready\n\t/Office/say/Hej, maten är klar/sv-se\n\t/sayall/Hello, dinner is ready\n\t/Office/say/Hello, dinner is ready/90\n\t/Office/say/Hej, maten är klar/sv-se/90\n\nlanguage code needs to be before volume if specified.\n\nSayall will group all players, set 40% volume (by default) and then try and restore everything as the way it where. Please try it out, it will probably contain glitches but please report detailed descriptions on what the problem is (starting state, error that occurs, and the final state of your system).\n\nThe supported language codes are:\n\n| Language code | Language |\n| ------------- | -------- |\n| ca-es | Catalan  |\n| zh-cn | Chinese (China) |\n| zh-hk |Chinese (Hong Kong) |\n| zh-tw | Chinese (Taiwan) |\n| da-dk | Danish |\n| nl-nl | Dutch |\n| en-au | English (Australia) |\n| en-ca | English (Canada) |\n| en-gb | English (Great Britain) |\n| en-in | English (India) |\n| en-us | English (United States) |\n| fi-fi | Finnish |\n| fr-ca | French (Canada) |\n| fr-fr | French (France) |\n| de-de | German |\n| it-it | Italian |\n| ja-jp | Japanese |\n| ko-kr | Korean |\n| nb-no | Norwegian |\n| pl-pl | Polish |\n| pt-br | Portuguese (Brazil) |\n| pt-pt | Portuguese (Portugal) |\n| ru-ru | Russian |\n| es-mx | Spanish (Mexico) |\n| es-es | Spanish (Spain) |\n| sv-se | Swedish (Sweden) |\n\n#### Microsoft\nThis one also requires a registered api key. You can sign up for free here: https://www.microsoft.com/cognitive-services/en-US/subscriptions?mode=NewTrials and select \"Bing Speech - Preview\".\n\nThe following configuration is available (the entered values except key are default, and may be omitted):\n\n```json\n\t{\n\t  \"microsoft\": {\n\t    \"key\": \"Your api for Bing speech API\",\n\t    \"name\": \"ZiraRUS\"\n\t  }\n\t}\n```\n\nYou change language by specifying a voice name correlating to the desired language.\nName should be specified according to this list: https://www.microsoft.com/cognitive-services/en-us/speech-api/documentation/API-Reference-REST/BingVoiceOutput#SupLocales\nwhere name is the right most part of the voice font name (without optional Apollo suffix). Example:\n\n`Microsoft Server Speech Text to Speech Voice (ar-EG, Hoda)` name should be specified as `Hoda`\n\n`Microsoft Server Speech Text to Speech Voice (de-DE, Stefan, Apollo)` name should be specified as `Stefan`\n\n`Microsoft Server Speech Text to Speech Voice (en-US, BenjaminRUS)` name should be specified as `BenjaminRUS`\n\nAction is:\n\n\t/[Room name]/say/[phrase][/[name]][/[announce volume]]\n\t/sayall/[phrase][/[name]][/[announce volume]]\n\nExample:\n\n\t/Office/say/Hello, dinner is ready\n\t/Office/say/Hello, dinner is ready/BenjaminRUS\n\t/Office/say/Guten morgen/Stefan\n\t/sayall/Hello, dinner is ready\n\t/Office/say/Hello, dinner is ready/90\n\t/Office/say/Guten morgen/Stefan/90\n\nSupported voices are:\n\nHoda, Hedda, Stefan, Catherine, Linda, Susan, George, Ravi, ZiraRUS, BenjaminRUS, Laura, Pablo, Raul, Caroline, Julie, Paul, Cosimo, Ayumi, Ichiro, Daniel, Irina, Pavel, HuihuiRUS, Yaoyao, Kangkang, Tracy, Danny, Yating, Zhiwei\n\nSee https://www.microsoft.com/cognitive-services/en-us/speech-api/documentation/API-Reference-REST/BingVoiceOutput#SupLocales to identify\nwhich language and gender it maps against.\n\n#### AWS Polly\n\nRequires AWS access tokens, which you generate for your user. Since this uses the AWS SDK, it will look for settings in either Environment variables, the ~/.aws/credentials or ~/.aws/config.\n\nYou can also specify it for this application only, using:\n```json\n\t{\n\t  \"aws\": {\n\t    \"credentials\": {\n\t      \"region\": \"eu-west-1\",\n\t      \"accessKeyId\": \"Your access key id\",\n\t      \"secretAccessKey\": \"Your secret\"\n\t    },\n\t    \"name\": \"Joanna\"\n\t  }\n\t}\n```\n\nChoose the region where you registered your account, or the one closest to you. Polly is only supported in US East (Northern Virginia), US West (Oregon), US East (Ohio), and EU (Ireland) as of today (dec 2016)\n\nIf you have your credentials elsewhere and want to stick with the default voice, you still need to make sure that the aws config option is set to trigger AWS TTS:\n\n```json\n\t{\n\t  \"aws\": {}\n\t}\n```\n\nAction is:\n\n\t/[Room name]/say/[phrase][/[name]][/[announce volume]]\n\t/sayall/[phrase][/[name]][/[announce volume]]\n\nExample:\n\n\t/Office/say/Hello, dinner is ready\n\t/Office/say/Hello, dinner is ready/Nicole\n\t/Office/say/Hej, maten är klar/Astrid\n\t/sayall/Hello, dinner is ready\n\t/Office/say/Hello, dinner is ready/90\n\t/Office/say/Hej, maten är klar/Astrid/90\n\nThis is the current list of voice names and their corresponding language and accent (as of Dec 2016).\nTo get a current list of voices, you would need to use the AWS CLI and invoke the describe-voices command.\n\n| Language | Code | Gender | Name |\n| --------- | ---- | ------ | ---- |\n| Australian English | en-AU | Female | Nicole |\n| Australian English | en-AU | Male | Russell |\n| Brazilian Portuguese | pt-BR | Female | Vitoria |\n| Brazilian Portuguese | pt-BR | Male | Ricardo |\n| British English | en-GB | Male | Brian |\n| British English | en-GB | Female | Emma |\n| British English | en-GB | Female | Amy |\n| Canadian French | fr-CA | Female | Chantal |\n| Castilian Spanish | es-ES | Female | Conchita |\n| Castilian Spanish | es-ES | Male | Enrique |\n| Danish | da-DK | Female | Naja |\n| Danish | da-DK | Male | Mads |\n| Dutch | nl-NL | Male | Ruben |\n| Dutch | nl-NL | Female | Lotte |\n| French | fr-FR | Male | Mathieu |\n| French | fr-FR | Female | Celine |\n| German | de-DE | Female | Marlene |\n| German | de-DE | Male | Hans |\n| Icelandic | is-IS | Male | Karl |\n| Icelandic | is-IS | Female | Dora |\n| Indian English | en-IN | Female | Raveena |\n| Italian | it-IT | Female | Carla |\n| Italian | it-IT | Male | Giorgio |\n| Japanese | ja-JP | Female | Mizuki |\n| Norwegian | nb-NO | Female | Liv |\n| Polish | pl-PL | Female | Maja |\n| Polish | pl-PL | Male | Jacek |\n| Polish | pl-PL | Male | Jan |\n| Polish | pl-PL | Female | Ewa |\n| Portuguese | pt-PT | Female | Ines |\n| Portuguese | pt-PT | Male | Cristiano |\n| Romanian | ro-RO | Female | Carmen |\n| Russian | ru-RU | Female | Tatyana |\n| Russian | ru-RU | Male | Maxim |\n| Swedish | sv-SE | Female | Astrid |\n| Turkish | tr-TR | Female | Filiz |\n| US English | en-US | Male | Justin |\n| US English | en-US | Female | Joanna |\n| US English | en-US | Male | Joey |\n| US English | en-US | Female | Ivy |\n| US English | en-US | Female | Salli |\n| US English | en-US | Female | Kendra |\n| US English | en-US | Female | Kimberly |\n| US Spanish | es-US | Female | Penelope |\n| US Spanish | es-US | Male | Miguel |\n| Welsh | cy-GB | Female | Gwyneth |\n| Welsh English | en-GB-WLS | Male | Geraint |\n\n#### Google (default if no other has been configured)\n\nDoes not require any API keys. Please note that Google has been known in the past to change the requirements for its Text-to-Speech API, and this may stop working in the future. There is also limiations to have many request one is allowed to do in a specific time period.\n\nThe following language codes are supported\n\n| Language code | Language |\n| ------------- | -------- |\n| af | Afrikaans |\n| sq | Albanian |\n| ar | Arabic |\n| hy | Armenian |\n| bn | Bengali |\n| ca | Catalan |\n| zh | Chinese |\n| zh-cn | Chinese (Mandarin/China) |\n| zh-tw | Chinese (Mandarin/Taiwan) |\n| zh-yue | Chinese (Cantonese) |\n| hr | Croatian |\n| cs | Czech |\n| da | Danish |\n| nl | Dutch |\n| en | English |\n| en-au | English (Australia) |\n| en-gb | English (Great Britain) |\n| en-us | English (United States) |\n| eo | Esperanto |\n| fi | Finnish |\n| fr | Franch |\n| de | German |\n| el | Greek |\n| hi | Hindi |\n| hu | Hungarian |\n| is | Icelandic |\n| id | Indonesian |\n| it | Italian |\n| ja | Japanese |\n| ko | Korean |\n| la | Latin |\n| lv | Latvian |\n| mk | Macedonian |\n| no | Norwegian |\n| pl | Polish |\n| pt | Portuguese |\n| pt-br | Portuguese (Brazil) |\n| ro | Romanian |\n| ru | Russian |\n| sr | Serbian |\n| sk | Slovak |\n| es | Spanish |\n| es-es | Spanish (Spain) |\n| es-us | Spanish (United States) |\n| sw | Swahili |\n| sv | Swedish |\n| ta | Tamil |\n| th | Thai |\n| tr | Turkish |\n| vi | Vietnamese |\n| cy | Welsh |\n\nAction is:\n\n\t/[Room name]/say/[phrase][/[language_code]][/[announce volume]]\n\t/sayall/[phrase][/[language_code]][/[announce volume]]\n\n#### macOS say command\nOn macOS the \"say\" command can be used for text to speech. If your installation runs on macOS you can activate the system TTS by giving an empty configuration:\n\n```json\n{\n  \"macSay\": {}\n}\n```\n\nOr you can provide a default voice and a speech rate:\n\n```json\n{\n  \"macSay\": {\n  \t\"voice\" : \"Alex\",\n  \t\"rate\": 90\n  }\n}\n```\n\nAction is:\n\n\t/[Room name]/say/[phrase][/[voice]][/[announce volume]]\n\t/sayall/[phrase][/[voice]][/[announce volume]]\n\nExample:\n\n\t/Office/say/Hello, dinner is ready\n\t/Office/say/Hello, dinner is ready/Agnes\n\t/Office/say/Guten morgen/Anna\n\t/sayall/Hello, dinner is ready\n\t/Office/say/Hello, dinner is ready/90\n\t/Office/say/Guten morgen/Anna/90\n\nSupported voices are:\n\nAlex, Alice, Alva, Amelie, Anna, Carmit, Damayanti, Daniel, Diego, Ellen, Fiona, Fred, Ioana, Joana, Jorge, Juan, Kanya, Karen, Kyoko, Laura, Lekha, Luca, Luciana, Maged, Mariska, Mei-Jia, Melina, Milena, Moira, Monica, Nora, Paulina, Samantha, Sara, Satu, Sin-ji, Tessa, Thomas, Ting-Ting, Veena, Victoria, Xander, Yelda, Yuna, Yuri, Zosia, Zuzana\n\nA list of available voices can be printed by this command:\n```\n   say -v '?'\n```\n\nSee also https://gist.github.com/mculp/4b95752e25c456d425c6 and https://stackoverflow.com/questions/1489800/getting-list-of-mac-text-to-speech-voices-programmatically\n\nTo download more voices go to: System Preferences -> Accessibility -> Speech -> System Voice\n\nLine-in\n-------\n\nConvenience method for selecting line in. Will select linein for zone-group, not detach it for line-in.\nOptional parameter is line-in from another player. Examples:\n\n`/Office/linein`\nSelects line-in on zone Office belongs to, with source Office.\n\n`/Office/linein/TV%20Room`\nSelects line-in for zone Office belongs to, with source TV Room.\n\nIf you want to to isolate a player and then select line-in, use the `/Office/leave` first.\n\nClip\n----\n\nLike \"Say\" but instead of a phrase, reference a custom track from the `static/clips` folder. There is a sample file available (courtesy of https://www.sound-ideas.com/).\n\n    /{Room name}/clip/{filename}[/{announce volume}]\n    /clipall/{filename}[/{announce volume}]\n\nExamples:\n\n    /clipall/sample_clip.mp3\n    /clipall/sample_clip.mp3/80\n    /Office/clip/sample_clip.mp3\n    /Office/clip/sample_clip.mp3/30\n\n*Pro-tip: announce your arrival with an epic theme song!*\n\nGrouping\n--------\n\nYou have basic grouping capabilities. `join` will join the selected player to the specified group (specify group by addressing any of the players in that group):\n\n`/Kitchen/join/Office`\nThis will join the Kitchen player to the group that Office currently belong to.\n\n`/Kitchen/leave`\nKitchen will leave any group it was part of and become a standalone player.\n\nYou don't have to ungroup a player in order to join it to another group, just join it to the new group and it will jump accordingly.\n\nSUB\n---\n\nSUB actions include the following:\n`/TV%20Room/sub/off`\nTurn off sub\n\n`/TV%20Room/sub/on`\nTurn on sub\n\n`/TV%20Room/sub/gain/3`\nAdjust gain, -15 to 15. You can make bigger adjustments, but I'm limiting it for now because it might damage the SUB.\n\n`/TV%20Room/sub/crossover/90`\nadjust crossover frequency in hz. Official values are 50 through 110 in increments of 10. Use other values at your own risk! My SUB gave a loud bang and shut down when setting this to high, and I thought I broke it. However, a restart woke it up again.\n\n`/TV%20Room/sub/polarity/1`\nSwitch \"placement adjustment\" or more commonly known as phase. 0 = 0°, 1 = 180°\n\nSpotify, Apple Music and Amazon Music (Experimental)\n----------------------\n\nAllows you to perform your own external searches for Apple Music or Spotify songs or albums and play a specified song or track ID. The Music Search funtionality outlined further below performs a search of its own and plays the specified music.\n\nThe following endpoints are available:\n\n```\n# Spotify\n/RoomName/spotify/now/spotify:track:4LI1ykYGFCcXPWkrpcU7hn\n/RoomName/spotify/next/spotify:track:4LI1ykYGFCcXPWkrpcU7hn\n/RoomName/spotify/queue/spotify:track:4LI1ykYGFCcXPWkrpcU7hn\n\n# Apple Music\n/RoomName/applemusic/{now,next,queue}/song:{songID}\n/RoomName/applemusic/{now,next,queue}/album:{albumID}\n\n# Amazon Music\n/RoomName/amazonmusic/{now,next,queue}/song:{songID}\n/RoomName/amazonmusic/{now,next,queue}/album:{albumID}\n```\n\nIt only handles a single **spotify** account currently. It will probably use the first account added on your system.\n\nYou can find **Apple Music** song and album IDs via the [iTunes Search\nAPI](https://affiliate.itunes.apple.com/resources/documentation/itunes-store-web-service-search-api/).\n\nYou can also use iTunes to figure out song and album IDs. Right click on a song or album and select \"Share\" -> \"Copy Link\". You can do this when you searched within Apple Music or from your media library as long as the song is available in Apple Music.\n\nHave a look at the link you just copied. \n\n*If you shared the link to a song:*\nThe format is: https://itunes.apple.com/de/album/{songName}/{albumID}?i={songID}\n> eg: https://itunes.apple.com/de/album/blood-of-my-enemies/355363490?i=355364259\n\n*If you shared the link to an album:*\nThe format is: https://itunes.apple.com/de/album/{albumName}/{albumID}\n> eg: https://itunes.apple.com/de/album/f-g-restless/355363490\n\nTo find **Amazon Music** song and album IDs you can use the Amazon Music App, search for a song or an album and share a link.\n\nLook at the link you just shared. This works with Amazon Music Prime as well as with Amazon Music Prime which is included in your Amazon Prime membership. \n\n*If you shared the link to a song:*\nThe format is: https://music.amazon.de/albums/{albumID}?trackAsin={songID}&ref=dm_sh_d74d-4daa-dmcp-63cb-e8747&musicTerritory=DE&marketplaceId=A1PA6795UKMFR9\n> eg: https://music.amazon.de/albums/B0727SH7LW?trackAsin=B071918VCR&ref=dm_sh_d74d-4daa-dmcp-63cb-e8747&musicTerritory=DE&marketplaceId=A1PA6795UKMFR9\n\n*If you shared the link to an album:*\nThe format is: https://music.amazon.de/albums/{albumID}?ref=dm_sh_97aa-255b-dmcp-c6ba-4ff00&musicTerritory=DE&marketplaceId=A1PA6795UKMFR9\n> eg: https://music.amazon.de/albums/B0727SH7LW?ref=dm_sh_97aa-255b-dmcp-c6ba-4ff00&musicTerritory=DE&marketplaceId=A1PA6795UKMFR9\n\n\nSiriusXM\n----------------------\nYou can specify a SiriusXM channel number or station name and the station will be played.\n\n```\n/RoomName/siriusXM/{channel number,station name}\n```\n\n\nPandora\n----------------------\nPerform a search for one of your Pandora stations and begin playing. Give the currently playing song a thumbs up or thumbs down. Requires a valid Pandora account and credentials.\n\nThe following endpoints are available:\n\n```\n/RoomName/pandora/play/{station name}     Plays the closest match to the specified station name in your list of Pandora stations\n/RoomName/pandora/thumbsup                Gives the current playing Pandora song a thumbs up\n/RoomName/pandora/thumbsdown              Gives the current playing Pandora song a thumbs down\n```\n\nYour Pandora credentials need to be added to the settings.json file\n   ```\n          ,\n          \"pandora\": {\n            \"username\": \"your-pandora-account-email-address\",\n            \"password\": \"your-pandora-password\"\n          }\n  ```\n\n\nTunein\n----------------------\nGiven a station id this will play or set the streaming broadcast via the tunein service. You can find tunein station ids via services like [radiotime](http://opml.radiotime.com/)\n\nThe following endpoint is available:\n\n```\n/RoomName/tunein/play/{station id}\nWill set and start playing given Station id\n\n/RoomName/tunein/set/{station id}\nWill set without start playing given Station id\n```\n\n\nMusic Search and Play\n----------------------\nPerform a search for a song, artist, album or station and begin playing. Supports Apple Music, Spotify, Deezer, Deezer Elite, and your local Music Library.\n\nThe following endpoint is available:\n\n```\n/RoomName/musicsearch/{service}/{type}/{search term}\n\nService options: apple, spotify, deezer, elite, library\n\nType options for apple, spotify, deezer, and elite: album, song, station, playlist\nStation plays a Pandora like artist radio station for a specified artist name.\nApple Music also supports song titles and artist name + song title.\n\nType options for library: album, song, load\nLoad performs an initial load or relaod of the local Sonos music library.\nThe music library will also get loaded the first time that the library service is\nused if the load command has not been issued before.\n\nSearch terms for song for all services: artist name, song title, artist name + song title\nSearch terms for album for all services: artist name, album title, artist name + album title\n\nSearch terms for station for apple: artist name, song title, artist name + song title\nSearch terms for station for spotify and deezer: artist name\nSearch terms for station for library: not supported\n\nSpecifying just an artist name will load the queue with up to 50 of the artist's most popular songs\nSpecifying a song title or artist + song title will insert the closest match to the song into\nthe queue and start playing it. More than 50 tracks can be loaded from the local library by using\nlibrary.randomQueueLimit in the settings.json file to set the maximum to a higher value.\n\nExamples:\n/Den/musicsearch/spotify/song/red+hot+chili+peppers\n/Kitchen/musicsearch/apple/song/dark+necessities\n/Playroom/musicsearch/library/song/red+hot+chili+peppers+dark+necessities\n\n/Den/musicsearch/spotify/album/abbey+road\n/Playroom/musicsearch/library/album/red+hot+chili+peppers+the+getaway\n/Kitchen/musicsearch/spotify/album/dark+necessities\n\n/Kitchen/musicsearch/spotify/playlist/morning+acoustic\n/Kitchen/musicsearch/spotify/playlist/dinner+with+friends\n\n/Den/musicsearch/spotify/station/red+hot+chili+peppers\n/Kitchen/musicsearch/apple/station/dark+necessities  (Only Apple Music supports song titles)\n/Playroom/musicsearch/apple/station/red+hot+chili+peppers+dark+necessities  (Only Apple Music supports song titles)\n\n/Kitchen/musicsearch/library/load  (Loads or reloads the music library from Sonos)\n```\n\n\nExperiment with these and leave feedback!\n\nWebhook\n-------\n\nNOTE! This is experimental and might change in the future! Please leave your feedback as github issues if you feel like it doesn't suit your need, since I don't know what kind of restrictions you will be facing.\n\nSince 0.17.x there is now support for a web hook. If you add a setting in settings.json like this:\n\n```\n{\n  \"webhook\": \"http://localhost:5007/\"\n}\n```\n\nEvery state change and topology change will be posted (method POST) to that URL, as JSON. The following data structure will be sent:\n\n```\n{\n  \"type\": \"transport-state\",\n  \"data\": { (snapshot of player) }\n}\n```\n\nor\n\n```\n{\n  \"type\": \"topology-change\",\n  \"data\": { (snapshot of zones) }\n}\n```\n\n```\n{\n  \"type\": \"volume-change\",\n  \"data\": {\n    \"uuid\": \"RINCON_000000000000001400\",\n    \"previousVolume\": 14,\n    \"newVolume\": 16,\n    \"roomName\": \"Office\"\n  }\n}\n```\n\n```\n{\n  \"type\": \"mute-change\",\n  \"data\": {\n    \"uuid\": \"RINCON_000000000000001400\",\n    \"previousMute\": true,\n    \"previousMute\": false,\n    \"roomName\": \"Office\"\n  }\n}\n```\n\n\"data\" property will be equal to the same data as you would get from /RoomName/state or /zones. There is an example endpoint in the root if this project called test_endpoint.js which you may fire up to get an understanding of what is posted, just invoke it with \"node test_endpoint.js\" in a terminal, and then start the http-api in another terminal.\n\n\nDOCKER\n-----\n\nDocker usage is maintained by [Chris Nesbitt-Smith](https://github.com/chrisns) at [chrisns/docker-node-sonos-http-api](https://github.com/chrisns/docker-node-sonos-http-api)\n\n## FIREWALL\n\nIf you are running this in an environment where you manually have to unblock traffic to and from the machine, the following traffic needs to be allowed:\n\n### Incoming\n```\nTCP, port 3500 (Sonos events)\nUDP, port 1905 (Sonos initial discovery)\nTCP, port 5005 (if using the default api port)\nTCP, port 5006 (if using https support, optional)\n```\n### Outgoing\n```\nTCP, port 1400 (Sonos control commands)\nUDP, port 1900 (Sonos initial discovery)\nTCP, whatever port used for webhooks (optional)\nTCP, port 80/443 (for looking up hig res cover arts on various music services)\n```\n\nThe UDP traffic is a mixture of multicast (outgoing), broadcast (outgoing) and unicast (incoming). The multicast address is 239.255.255.250, the broadcast is 255.255.255.255 and the unicast is from the Sonos players.\n\nIf port 3500 is occupied while trying to bind it, it will try using 3501, 3502, 3503 etc. You would need to adjust your firewall rules accordingly, if running multiple instances of this software, or any other software utilizing these ports. \n\n### Projects built with this API\n\n**Alexa For Sonos (Alexa Skills)**\n\nAmazon Alexa voice layer on top of the amazing NodeJS component\nhttps://github.com/hypermoose/AlexaForSonos\n\n**JukeBot (Ruby)**\n\nA Slack bot that can control a Sonos instance. Custom spotify integration to find music.\nhttps://github.com/estiens/jukebot\n\n**Sonos Controller (JS / Electron)**\n\nA Sonos controller, built with the Electron framework.\nhttps://github.com/anton-christensen/sonos-controller\n\n**Sonos Cron (PHP)**\n\nService for retrieving commands from an AWS SQS queue and passing them to an instance of the Sonos HTTP API \nhttps://github.com/cjrpaterson/sonos-cron\n\n**Sonos Push Server (JS)**\n\nA Node server to receive notifications from node-sonos-http-api and push them via socket.io to the clients. \nhttps://github.com/TimoKorinth/sonos-push-server\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/jishi/node-sonos-http-api.git"
  },
  "scripts": {
    "lint": "eslint lib",
    "start": "node server.js"
  },
  "version": "1.6.0",
  "warnings": [
    {
      "code": "ENOTSUP",
      "required": {
        "node": ">=4.0.0",
        "npm": "^2.0.0"
      },
      "pkgid": "sonos-http-api@1.6.0"
    },
    {
      "code": "ENOTSUP",
      "required": {
        "node": ">=4.0.0",
        "npm": "^2.0.0"
      },
      "pkgid": "sonos-http-api@1.6.0"
    }
  ]
}
