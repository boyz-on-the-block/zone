'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Common_1 = require("../common/Common");
var strtok3 = require("strtok3");
var stream_1 = require("stream");
var es6_promise_1 = require("es6-promise");
var Token = require("token-types");
var VorbisParser_1 = require("../vorbis/VorbisParser");
var FourCC_1 = require("../common/FourCC");
var VorbisStream = /** @class */ (function (_super) {
    __extends(VorbisStream, _super);
    function VorbisStream() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.queue = [];
        _this.waitingForData = false;
        return _this;
    }
    VorbisStream.prototype.append = function (vorbisData) {
        this.queue.push(vorbisData);
        this._tryPush();
    };
    VorbisStream.prototype._read = function () {
        this.waitingForData = true;
        this._tryPush();
    };
    VorbisStream.prototype._tryPush = function () {
        while (this.waitingForData) {
            var buf = this.queue.shift();
            if (buf || buf === null) {
                this.waitingForData = this.push(buf);
            }
            else
                break;
        }
    };
    return VorbisStream;
}(stream_1.Readable));
var OggParser = /** @class */ (function () {
    function OggParser() {
    }
    OggParser.getInstance = function () {
        return new OggParser();
    };
    OggParser.prototype.parse = function (tokenizer, options) {
        var _this = this;
        this.tokenizer = tokenizer;
        this.vorbisParser = new VorbisParser_1.VorbisParser();
        this.vorbisStream = new VorbisStream();
        return strtok3.fromStream(this.vorbisStream).then(function (vorbisTokenizer) {
            var vorbis = _this.vorbisParser.parse(vorbisTokenizer, options);
            var ogg = _this.parsePage()
                .catch(function (err) {
                if (err.message === strtok3.endOfFile) {
                    _this.vorbisStream.append(null);
                }
                else
                    throw err;
            });
            return es6_promise_1.Promise.all([vorbis, ogg]).then(function (_a) {
                var metadata = _a[0];
                if (metadata.format.sampleRate && _this.header.absoluteGranulePosition >= 0) {
                    // Calculate duration
                    metadata.format.duration = _this.header.absoluteGranulePosition / metadata.format.sampleRate;
                }
                return metadata;
            });
        });
    };
    OggParser.prototype.parsePage = function () {
        var _this = this;
        return this.tokenizer.readToken(OggParser.Header).then(function (header) {
            if (header.capturePattern !== 'OggS') {
                throw new Error('expected ogg header but was not found');
            }
            // console.log('Ogg: Page-header: seqNo=%s, pos=%s', header.pageSequenceNo, header.absoluteGranulePosition);
            _this.header = header;
            _this.pageNumber = header.pageSequenceNo;
            return _this.tokenizer.readToken(new Token.BufferType(header.segmentTable)).then(function (segments) {
                var pageLength = Common_1.default.sum(segments);
                return _this.tokenizer.readToken(new Token.BufferType(pageLength)).then(function (pageData) {
                    _this.vorbisStream.append(pageData);
                    return _this.parsePage();
                });
            });
        });
    };
    OggParser.Header = {
        len: 27,
        get: function (buf, off) {
            return {
                capturePattern: FourCC_1.FourCcToken.get(buf, off),
                version: buf.readUInt8(off + 4),
                headerType: {
                    continued: Common_1.default.strtokBITSET.get(buf, off + 5, 0),
                    firstPage: Common_1.default.strtokBITSET.get(buf, off + 5, 1),
                    lastPage: Common_1.default.strtokBITSET.get(buf, off + 5, 2)
                },
                // packet_flag: buf.readUInt8(off + 5),
                absoluteGranulePosition: buf.readIntLE(off + 6, 6),
                streamSerialNumber: Token.UINT32_LE.get(buf, off + 14),
                pageSequenceNo: Token.UINT32_LE.get(buf, off + 18),
                pageChecksum: Token.UINT32_LE.get(buf, off + 22),
                segmentTable: buf.readUInt8(off + 26)
            };
        }
    };
    return OggParser;
}());
exports.OggParser = OggParser;
