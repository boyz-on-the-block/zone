export declare type TagType = 'vorbis' | 'ID3v1.1' | 'ID3v2.2' | 'ID3v2.3' | 'ID3v2.4' | 'APEv2' | 'asf' | 'iTunes MP4';
export declare type CommonTag = 'track' | 'disk' | 'year' | 'title' | 'artist' | 'artists' | 'albumartist' | 'album' | 'date' | 'originaldate' | 'originalyear' | 'comment' | 'genre' | 'picture' | 'composer' | 'lyrics' | 'albumsort' | 'titlesort' | 'work' | 'artistsort' | 'albumartistsort' | 'composersort' | 'lyricist' | 'writer' | 'conductor' | 'remixer' | 'arranger' | 'engineer' | 'producer' | 'djmixer' | 'mixer' | 'label' | 'grouping' | 'subtitle' | 'discsubtitle' | 'totaltracks' | 'totaldiscs' | 'compilation' | '_rating' | 'bpm' | 'mood' | 'media' | 'catalognumber' | 'show' | 'showsort' | 'podcast' | 'podcasturl' | 'releasestatus' | 'releasetype' | 'releasecountry' | 'script' | 'language' | 'copyright' | 'license' | 'encodedby' | 'encodersettings' | 'gapless' | 'barcode' | 'isrc' | 'asin' | 'musicbrainz_recordingid' | 'musicbrainz_trackid' | 'musicbrainz_albumid' | 'musicbrainz_artistid' | 'musicbrainz_albumartistid' | 'musicbrainz_releasegroupid' | 'musicbrainz_workid' | 'musicbrainz_trmid' | 'musicbrainz_discid' | 'acoustid_id' | 'acoustid_fingerprint' | 'musicip_puid' | 'musicip_fingerprint' | 'website' | 'performer:instrument' | 'peakLevel' | 'averageLevel' | 'notes' | 'key' | 'originalalbum' | 'originalartist' | 'discogs_release_id' | 'replaygain_track_gain' | 'replaygain_track_peak';
export declare const TagPriority: string[];
export interface INativeTagMap {
    [index: string]: CommonTag;
}
export interface ITagInfo {
    multiple: boolean;
}
export interface ITagInfoMap {
    [index: string]: ITagInfo;
}
/**
 * tagmap maps native meta tags to generic common types
 */
export default class TagMap {
    /**
     * @param alias Name of common tag
     * @returns {boolean|*} true if given alias is mapped as a singleton', otherwise false
     */
    static isSingleton(alias: CommonTag): boolean;
    private static commonTags;
    private static capitalizeTags(map);
    private mappings;
    constructor();
    /**
     * Test if native tag tagTypes is a singleton
     * @param type e.g.: 'iTunes MP4' | 'asf' | 'ID3v1.1' | 'ID3v2.4' | 'vorbis'
     * @param  tag Native tag name', e.g. 'TITLE'
     * @returns {boolean} true is we can safely assume that it is a  singleton
     */
    isNativeSingleton(type: TagType, tag: string): boolean;
    /**
     * @tagTypes Native header tagTypes: e.g.: 'm4a' | 'asf' | 'ID3v1.1' | 'vorbis'
     * @tag  Native header tag
     * @return common tag name (alias)
     */
    getCommonName(type: TagType, tag: string): CommonTag;
}
