'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
var GUID_1 = require("./GUID");
var AsfObject = require("./AsfObject");
/**
 * Windows Media Metadata Usage Guidelines
 *   Ref: https://msdn.microsoft.com/en-us/library/ms867702.aspx
 *
 * Ref:
 *   https://tools.ietf.org/html/draft-fleischman-asf-01
 *   https://hwiegman.home.xs4all.nl/fileformats/asf/ASF_Specification.pdf
 *   http://drang.s4.xrea.com/program/tips/id3tag/wmp/index.html
 *   https://msdn.microsoft.com/en-us/library/windows/desktop/ee663575(v=vs.85).aspx
 */
var AsfParser = /** @class */ (function () {
    function AsfParser() {
        this.tags = [];
        this.warnings = []; // ToDo: make these part of the parsing result
        this.format = {};
    }
    AsfParser.prototype.parse = function (tokenizer, options) {
        this.tokenizer = tokenizer;
        return this.paresTopLevelHeaderObject();
    };
    AsfParser.prototype.paresTopLevelHeaderObject = function () {
        var _this = this;
        return this.tokenizer.readToken(AsfObject.TopLevelHeaderObjectToken).then(function (header) {
            if (!header.objectId.equals(GUID_1.default.HeaderObject)) {
                throw new Error('expected asf header; but was not found; got: ' + header.objectId.str);
            }
            _this.numberOfObjectHeaders = header.numberOfHeaderObjects;
            return _this.parseObjectHeader();
        });
    };
    AsfParser.prototype.parseObjectHeader = function () {
        var _this = this;
        // Parse common header of the ASF Object (3.1)
        return this.tokenizer.readToken(AsfObject.HeaderObjectToken).then(function (header) {
            // Parse data part of the ASF Object
            switch (header.objectId.str) {
                case AsfObject.FilePropertiesObject.guid.str:// 3.2
                    return _this.tokenizer.readToken(new AsfObject.FilePropertiesObject(header)).then(function (fpo) {
                        _this.format.duration = fpo.playDuration / 10000000;
                        _this.format.bitrate = fpo.maximumBitrate;
                    });
                case AsfObject.StreamPropertiesObject.guid.str:// 3.3
                    return _this.tokenizer.readToken(new AsfObject.StreamPropertiesObject(header)).then(function () {
                        return null; // ToDo
                    });
                case AsfObject.HeaderExtensionObject.guid.str:// 3.4
                    return _this.tokenizer.readToken(new AsfObject.HeaderExtensionObject(header)).then(function () {
                        return _this.parseObjectHeader();
                    });
                case AsfObject.ContentDescriptionObjectState.guid.str:// 3.10
                    return _this.tokenizer.readToken(new AsfObject.ContentDescriptionObjectState(header)).then(function (tags) {
                        _this.tags = _this.tags.concat(tags);
                    });
                case AsfObject.ExtendedContentDescriptionObjectState.guid.str:// 3.11
                    return _this.tokenizer.readToken(new AsfObject.ExtendedContentDescriptionObjectState(header)).then(function (tags) {
                        _this.tags = _this.tags.concat(tags);
                    });
                case AsfObject.ExtendedStreamPropertiesObjectState.guid.str:// 4.1
                    return _this.tokenizer.readToken(new AsfObject.ExtendedStreamPropertiesObjectState(header)).then(function (cd) {
                        return null;
                    });
                case AsfObject.MetadataObjectState.guid.str:// 4.7
                    return _this.tokenizer.readToken(new AsfObject.MetadataObjectState(header)).then(function (tags) {
                        _this.tags = _this.tags.concat(tags);
                    });
                case AsfObject.MetadataLibraryObjectState.guid.str:// 4.8
                    return _this.tokenizer.readToken(new AsfObject.MetadataLibraryObjectState(header)).then(function (tags) {
                        _this.tags = _this.tags.concat(tags);
                    });
                case GUID_1.default.PaddingObject.str:
                    // ToDo: register bytes pad
                    return _this.tokenizer.ignore(header.objectSize - AsfObject.HeaderObjectToken.len);
                default:
                    _this.warnings.push("Ignore ASF-Object-GUID: " + header.objectId.str);
                    // console.log("Ignore ASF-Object-GUID: %s", header.objectId.str);
                    return _this.tokenizer.readToken(new AsfObject.IgnoreObjectState(header));
            }
        }).then(function () {
            if (--_this.numberOfObjectHeaders > 0) {
                return _this.parseObjectHeader();
            }
            else {
                // done
                return {
                    format: _this.format,
                    native: {
                        asf: _this.tags
                    }
                };
            }
        });
    };
    AsfParser.headerType = 'asf';
    return AsfParser;
}());
exports.AsfParser = AsfParser;
